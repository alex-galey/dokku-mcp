name: Monitor Dokku Releases

on:
  schedule:
    - cron: '12 20 * * *'
  workflow_dispatch: # Allow manual execution

jobs:
  check-dokku-releases:
    name: Check for New Dokku Releases
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to push changes to .tested-dokku-versions
      issues: write    # Required to create issues for new releases
      actions: write   # Required to trigger other workflows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Get latest Dokku release
      id: dokku-release
      run: |
        # Get the latest release from Dokku repository (excluding pre-releases)
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/dokku/dokku/releases?per_page=1" | jq -r '.[0] | select(.prerelease == false) | .tag_name // empty')
        
        if [ -z "$LATEST_RELEASE" ]; then
          echo "No stable release found"
          echo "already_tested=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT
        echo "Found latest stable release: $LATEST_RELEASE"
        
        # Check if we've already tested this version
        if [ -f ".tested-dokku-versions" ]; then
          if grep -q "^$LATEST_RELEASE$" .tested-dokku-versions; then
            echo "already_tested=true" >> $GITHUB_OUTPUT
            echo "Version $LATEST_RELEASE already tested"
          else
            echo "already_tested=false" >> $GITHUB_OUTPUT
            echo "New version detected: $LATEST_RELEASE"
          fi
        else
          echo "already_tested=false" >> $GITHUB_OUTPUT
          echo "No previous test record found, treating as new version: $LATEST_RELEASE"
        fi
    
    - name: Update tested versions file
      if: steps.dokku-release.outputs.already_tested == 'false'
      run: |
        # Add new version to file
        echo "${{ steps.dokku-release.outputs.latest_release }}" >> .tested-dokku-versions
        
        # Clean up file: remove duplicates, sort versions, remove empty lines
        sort -V .tested-dokku-versions | uniq | grep -v '^$' > .tested-dokku-versions.tmp
        
        # Keep only the last patch version of the last 4 minor releases
        python3 - << 'PYTHON_EOF'
        import re
        from collections import defaultdict
        
        # Read all versions (filter out comments and empty lines)
        with open('.tested-dokku-versions.tmp', 'r') as f:
            versions = [line.strip() for line in f if line.strip() and not line.strip().startswith('#')]
        
        # Parse versions into (major, minor, patch) tuples
        version_map = defaultdict(list)
        for v in versions:
            match = re.match(r'v?(\d+)\.(\d+)\.(\d+)', v)
            if match:
                major, minor, patch = map(int, match.groups())
                version_map[(major, minor)].append((major, minor, patch, v))
        
        # Sort each minor version group by patch and keep only the latest
        latest_by_minor = {}
        for key, version_list in version_map.items():
            version_list.sort(key=lambda x: x[2], reverse=True)
            latest_by_minor[key] = version_list[0][3]
        
        # Sort minor versions and keep only the last 4
        sorted_minors = sorted(latest_by_minor.keys(), reverse=True)[:4]
        latest_versions = [latest_by_minor[minor] for minor in sorted(sorted_minors)]
        
        # Write back the pruned list with header
        with open('.tested-dokku-versions', 'w') as f:
            f.write('# Dokku versions tested for compatibility\n')
            f.write('# This file is automatically maintained by .github/workflows/dokku-release-monitor.yml\n')
            f.write('# Strategy: Keep only the LATEST PATCH of the LAST 4 MINOR releases\n')
            f.write('# Example: v0.33.9, v0.34.9, v0.35.20, v0.36.7\n')
            f.write("# Note: 'master' is automatically added to the test matrix by compatibility.yml\n")
            for v in latest_versions:
                f.write(v + '\n')
        
        print("Kept versions (last 4 minors, latest patch each):")
        for v in latest_versions:
            print(f"  - {v}")
        PYTHON_EOF
        
        # Show what we have now
        echo "Current tested versions:"
        cat .tested-dokku-versions
        
        # Only commit and push if there are changes
        if git diff --quiet .tested-dokku-versions; then
          echo "No changes to commit"
        else
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .tested-dokku-versions
          git commit -m "Add Dokku ${{ steps.dokku-release.outputs.latest_release }} to compatibility test matrix"
          git push
        fi
    
    - name: Trigger compatibility tests
      if: steps.dokku-release.outputs.already_tested == 'false'
      uses: actions/github-script@v8
      with:
        script: |
          github.rest.repos.createDispatchEvent({
            owner: context.repo.owner,
            repo: context.repo.repo,
            event_type: 'dokku-release',
            client_payload: {
              dokku_version: '${{ steps.dokku-release.outputs.latest_release }}',
              triggered_by: 'release-monitor'
            }
          });
          
          console.log('Triggered compatibility tests for Dokku version: ${{ steps.dokku-release.outputs.latest_release }}');
    
    - name: Create issue for new release
      if: steps.dokku-release.outputs.already_tested == 'false'
      uses: actions/github-script@v8
      with:
        script: |
          const dokkuVersion = '${{ steps.dokku-release.outputs.latest_release }}';
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `New Dokku Release Detected: ${dokkuVersion}`,
            body: `🎉 **New Dokku Release**: ${dokkuVersion}

          **Automatic Actions Taken:**
          - ✅ Compatibility tests have been triggered
          - 📝 Version added to tracking file

          **What was tested:**
          - ✅ Compatibility tests against Dokku ${dokkuVersion} specifically
          - ⏭️  Load tests, security audit, and maintenance (skipped for release-specific tests)

          **Next Steps:**
          - Monitor the compatibility test results in the [Actions tab](../../actions)
          - If tests pass, consider updating documentation with new supported version
          - If tests fail, investigate compatibility issues with the new Dokku version

          **Release Information:**
          - **Dokku Release**: [${dokkuVersion}](https://github.com/dokku/dokku/releases/tag/${dokkuVersion})
          - **Test Workflow**: [View Results](../../actions/workflows/schedule.yml)
          - **Triggered by**: Automated release monitoring (every day at 20:12 UTC)

          **How it works:**
          1. 🔍 Monitor detects new Dokku releases
          2. 🚀 Automatically triggers compatibility tests  
          3. 📝 Tracks tested versions to avoid duplicates
          4. 📋 Creates this issue to notify maintainers`,
            labels: ['dokku-release', 'compatibility', 'automated']
          }); 