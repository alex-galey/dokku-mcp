name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.24'

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [[ -n "$PREVIOUS_TAG" ]]; then
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --oneline --pretty=format:"- %s")
          else
            CHANGELOG="Initial release"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        os: [linux, darwin]
        arch: [amd64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="dokku-mcp-${{ matrix.os }}-${{ matrix.arch }}"
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          mkdir -p build
          go build \
            -ldflags "-X main.Version=${{ needs.prepare-release.outputs.version }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -s -w" \
            -o "build/${BINARY_NAME}" \
            cmd/server/main.go

      - name: Create archive
        id: create_archive
        run: |
          cd build
          BINARY_NAME="dokku-mcp-${{ matrix.os }}-${{ matrix.arch }}"
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          # Create archive
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            zip "${BINARY_NAME%.exe}.zip" "$BINARY_NAME"
            ARCHIVE="${BINARY_NAME%.exe}.zip"
          else
            tar -czf "${BINARY_NAME}.tar.gz" "$BINARY_NAME"
            ARCHIVE="${BINARY_NAME}.tar.gz"
          fi
          
          echo "archive=$ARCHIVE" >> $GITHUB_OUTPUT
          echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare-release.outputs.version }}
          name: Release ${{ needs.prepare-release.outputs.version }}
          body: |
            ## Changes
            ${{ needs.prepare-release.outputs.changelog }}
            
            ## Installation
            
            Download the appropriate binary for your platform from the assets below.
            
            ### Linux/macOS
            ```bash
            # Download and install (replace with actual URL for your architecture)
            curl -L -o dokku-mcp https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare-release.outputs.version }}/dokku-mcp-linux-amd64
            chmod +x dokku-mcp
            sudo mv dokku-mcp /usr/local/bin/
            ```
            
            ### Verify installation
            ```bash
            dokku-mcp --version
            ```
          artifacts: "build/${{ steps.create_archive.outputs.binary_name }},build/${{ steps.create_archive.outputs.archive }}"
          draft: false
          prerelease: false
          allowUpdates: true
          removeArtifacts: false
          token: ${{ secrets.GITHUB_TOKEN }}

  # docker-build:
  #   name: Build and Push Docker Image
  #   runs-on: ubuntu-latest
  #   needs: create-release
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Docker Hub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Extract metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: dokku/mcp-server
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=semver,pattern={{major}}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         platforms: linux/amd64,linux/arm64
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         build-args: |
  #           VERSION=${{ needs.create-release.outputs.version }}
  #           BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in docs
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          # Update README.md with new version
          sed -i "s/Version: v[0-9]\+\.[0-9]\+\.[0-9]\+/Version: $VERSION/g" README.md || true
          
          # Update installation instructions
          sed -i "s|releases/download/v[0-9]\+\.[0-9]\+\.[0-9]\+/|releases/download/$VERSION/|g" README.md || true

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || git commit -m "docs: update version to ${{ needs.prepare-release.outputs.version }}"
          git push

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-release, update-docs]
    if: success()
    
    steps:
      - name: Success notification
        run: |
          echo "üéâ Release ${{ needs.prepare-release.outputs.version }} completed successfully!"
          echo "üì¶ Binaries built for all platforms"
          # echo "üê≥ Docker image pushed"
          echo "üìö Documentation updated" 