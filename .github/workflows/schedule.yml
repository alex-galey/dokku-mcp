name: Scheduled Tests

on:
  schedule:
    # Every day at 2am UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual execution

jobs:
  dokku-compatibility:
    name: Dokku Compatibility Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dokku-version: ['v0.31.5', 'v0.32.4', 'v0.33.9', 'v0.34.9', 'master']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
    
    - name: Install Dokku ${{ matrix.dokku-version }}
      run: |
        if [ "${{ matrix.dokku-version }}" = "master" ]; then
          wget -O- https://raw.githubusercontent.com/dokku/dokku/master/bootstrap.sh | sudo bash
        else
          wget -O- https://raw.githubusercontent.com/dokku/dokku/${{ matrix.dokku-version }}/bootstrap.sh | sudo bash
        fi
        sudo dokku plugin:install-dependencies --core
        sudo dokku events:on || true
        sudo usermod -aG dokku $USER
    
    - name: Install Ginkgo
      run: make install-ginkgo
    
    - name: Integration tests
      run: make -f Makefile.ci test-ci-integration-real
      continue-on-error: ${{ matrix.dokku-version == 'master' }}
    
    - name: Cleanup
      if: always()
      run: make -f Makefile.ci cleanup-ci

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
    
    - name: Install Dokku
      run: |
        wget -O- https://raw.githubusercontent.com/dokku/dokku/v0.34.0/bootstrap.sh | sudo bash
        sudo dokku plugin:install-dependencies --core
        sudo dokku events:on || true
        sudo usermod -aG dokku $USER
    
    - name: Load tests
      run: |
        export MAX_TEST_APPS=20
        export CONCURRENT_TESTS=5
        make -f Makefile.ci test-ci-performance
    
    - name: Performance profiling
      run: make profile
    
    - name: Upload profiles
      uses: actions/upload-artifact@v3
      with:
        name: performance-profiles-${{ github.run_number }}
        path: |
          *.prof
          *.html
    
    - name: Cleanup
      if: always()
      run: make -f Makefile.ci cleanup-ci

  security-audit:
    name: Deep Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
    
    - name: Install security tools
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        go install github.com/quasilyte/go-ruleguard/cmd/ruleguard@latest
        go install honnef.co/go/tools/cmd/staticcheck@latest
    
    - name: Security analysis with gosec
      run: make -f Makefile.ci test-ci-security
    
    - name: Static analysis with staticcheck
      run: staticcheck ./...
    
    - name: Vulnerable dependency check
      run: |
        go list -json -deps ./... | go run github.com/sonatypecommunity/nancy@latest sleuth
    
    - name: Upload security report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-report.sarif
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          gosec-report.*
          
  maintenance:
    name: Maintenance and Cleanup
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
    
    - name: Clean Go caches
      run: |
        go clean -cache
        go clean -modcache
        go clean -testcache
    
    - name: Check dependency updates
      run: |
        go list -u -m all
        go mod tidy
    
    - name: Generate documentation
      run: make docs
    
    - name: Code quality check
      run: |
        make cyclo
        make dupl
    
    - name: Final cleanup
      run: make clean

  notify:
    name: Notification Results
    runs-on: ubuntu-latest
    needs: [dokku-compatibility, load-tests, security-audit, maintenance]
    if: always()
    
    steps:
    - name: Prepare summary
      run: |
        echo "## Scheduled Test Results for $(date)" > summary.md
        echo "" >> summary.md
        echo "### Job Status:" >> summary.md
        echo "- Dokku Compatibility: ${{ needs.dokku-compatibility.result }}" >> summary.md
        echo "- Load Tests: ${{ needs.load-tests.result }}" >> summary.md
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> summary.md
        echo "- Maintenance: ${{ needs.maintenance.result }}" >> summary.md
        echo "" >> summary.md
        echo "### Recommended Actions:" >> summary.md
        if [ "${{ needs.security-audit.result }}" = "failure" ]; then
          echo "- ðŸ”’ Review security alerts" >> summary.md
        fi
        if [ "${{ needs.dokku-compatibility.result }}" = "failure" ]; then
          echo "- ðŸ”§ Check compatibility with new Dokku versions" >> summary.md
        fi
        if [ "${{ needs.load-tests.result }}" = "failure" ]; then
          echo "- âš¡ Analyze performance issues" >> summary.md
        fi
    
    - name: Create issue if tests fail
      if: needs.dokku-compatibility.result == 'failure' || needs.security-audit.result == 'failure' || needs.load-tests.result == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('summary.md', 'utf8');
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Scheduled Tests Failed - ${new Date().toISOString().split('T')[0]}`,
            body: summary,
            labels: ['bug', 'ci', 'maintenance']
          }); 